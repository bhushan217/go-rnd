// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: permission.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (
  title
) VALUES (
  $1
)
RETURNING id, title, created_at, created_by, updated_at, updated_by, version, latest
`

func (q *Queries) CreatePermission(ctx context.Context, id pgtype.Text) (Permission, error) {
	row := q.db.QueryRow(ctx, createPermission, id)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Version,
		&i.Latest,
	)
	return i, err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM permissions
WHERE id = $1
`

func (q *Queries) DeletePermission(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePermission, id)
	return err
}

const getPermission = `-- name: GetPermission :one
SELECT id, title, created_at, created_by, updated_at, updated_by, version, latest FROM permissions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPermission(ctx context.Context, id int64) (Permission, error) {
	row := q.db.QueryRow(ctx, getPermission, id)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Version,
		&i.Latest,
	)
	return i, err
}

const listPermission = `-- name: ListPermission :many
SELECT id, title, created_at, created_by, updated_at, updated_by, version, latest FROM permissions
ORDER BY title
`

func (q *Queries) ListPermission(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.Query(ctx, listPermission)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Version,
			&i.Latest,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePermission = `-- name: UpdatePermission :exec
UPDATE permissions
  set title = $1
WHERE id = $2
`

type UpdatePermissionParams struct {
	Title pgtype.Text `db:"title" json:"title"`
	ID    int64       `db:"id" json:"id"`
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) error {
	_, err := q.db.Exec(ctx, updatePermission, arg.Title, arg.ID)
	return err
}
