// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: post.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  title,
  body,
  user_id,
  status
) VALUES (
  $1,
  $2,
  $3,
  $4
)
RETURNING id, title, body, user_id, status, created_at, created_by, updated_at, updated_by, version, latest
`

type CreatePostParams struct {
	ID     pgtype.Text `db:"id" json:"id"`
	Body   pgtype.Text `db:"body" json:"body"`
	UserID pgtype.Int8 `db:"user_id" json:"user_id"`
	Status pgtype.Text `db:"status" json:"status"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.ID,
		arg.Body,
		arg.UserID,
		arg.Status,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Version,
		&i.Latest,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1 and version = $2
`

type DeletePostParams struct {
	ID      int64       `db:"id" json:"id"`
	Version pgtype.Int8 `db:"version" json:"version"`
}

func (q *Queries) DeletePost(ctx context.Context, arg DeletePostParams) error {
	_, err := q.db.Exec(ctx, deletePost, arg.ID, arg.Version)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, title, body, user_id, status, created_at, created_by, updated_at, updated_by, version, latest FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Version,
		&i.Latest,
	)
	return i, err
}

const listPost = `-- name: ListPost :many
SELECT id, title, body, user_id, status, created_at, created_by, updated_at, updated_by, version, latest FROM posts
ORDER BY updated_at DESC
`

func (q *Queries) ListPost(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPost)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.UserID,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Version,
			&i.Latest,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :exec
UPDATE posts
  set title = $1,
  version = version + 1,
  updated_at = CURRENT_TIMESTAMP,
  updated_by = $2
WHERE id = $3 and version = $4
`

type UpdatePostParams struct {
	Title     pgtype.Text `db:"title" json:"title"`
	UpdatedBy pgtype.Int8 `db:"updated_by" json:"updated_by"`
	ID        int64       `db:"id" json:"id"`
	Version   pgtype.Int8 `db:"version" json:"version"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.db.Exec(ctx, updatePost,
		arg.Title,
		arg.UpdatedBy,
		arg.ID,
		arg.Version,
	)
	return err
}
