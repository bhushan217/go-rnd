// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashed_password,
  full_name,
  email
) VALUES (
  $1, $2, $3, $4
) RETURNING id, username, full_name, email, hashed_password, password_changed_at, is_email_verified, created_at, created_by, updated_at, updated_by, version, latest
`

type CreateUserParams struct {
	Username       string `db:"username" json:"username"`
	HashedPassword string `db:"hashed_password" json:"hashed_password"`
	FullName       string `db:"full_name" json:"full_name"`
	Email          string `db:"email" json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.IsEmailVerified,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Version,
		&i.Latest,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1 and version = $2
`

type DeleteUserParams struct {
	ID      int64       `db:"id" json:"id"`
	Version pgtype.Int8 `db:"version" json:"version"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.Exec(ctx, deleteUser, arg.ID, arg.Version)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, full_name, email, hashed_password, password_changed_at, is_email_verified, created_at, created_by, updated_at, updated_by, version, latest FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.IsEmailVerified,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Version,
		&i.Latest,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, full_name, email, hashed_password, password_changed_at, is_email_verified, created_at, created_by, updated_at, updated_by, version, latest FROM users
WHERE upper(username) like upper($1)
OR upper(full_name) like upper($1)
OR upper(email) like upper($1)
ORDER BY username limit $3 offset $2
`

type ListUsersParams struct {
	SearchText string `db:"search_text" json:"search_text"`
	PageOffset int64  `db:"page_offset" json:"page_offset"`
	PageSize   int64  `db:"page_size" json:"page_size"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.SearchText, arg.PageOffset, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.FullName,
			&i.Email,
			&i.HashedPassword,
			&i.PasswordChangedAt,
			&i.IsEmailVerified,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Version,
			&i.Latest,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  hashed_password = COALESCE($1, hashed_password),
  password_changed_at = COALESCE($2, password_changed_at),
  full_name = COALESCE($3, full_name),
  email = COALESCE($4, email),
  is_email_verified = COALESCE($5, is_email_verified)
WHERE
  username = $6 and version = $7
RETURNING id, username, full_name, email, hashed_password, password_changed_at, is_email_verified, created_at, created_by, updated_at, updated_by, version, latest
`

type UpdateUserParams struct {
	HashedPassword    pgtype.Text        `db:"hashed_password" json:"hashed_password"`
	PasswordChangedAt pgtype.Timestamptz `db:"password_changed_at" json:"password_changed_at"`
	FullName          pgtype.Text        `db:"full_name" json:"full_name"`
	Email             pgtype.Text        `db:"email" json:"email"`
	IsEmailVerified   pgtype.Bool        `db:"is_email_verified" json:"is_email_verified"`
	Username          string             `db:"username" json:"username"`
	Version           pgtype.Int8        `db:"version" json:"version"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.FullName,
		arg.Email,
		arg.IsEmailVerified,
		arg.Username,
		arg.Version,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.IsEmailVerified,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Version,
		&i.Latest,
	)
	return i, err
}
